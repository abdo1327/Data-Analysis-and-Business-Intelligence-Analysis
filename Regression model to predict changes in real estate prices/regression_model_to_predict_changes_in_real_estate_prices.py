# -*- coding: utf-8 -*-
"""Regression model to predict changes in real estate prices

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ztmp1MvZeU037rHD7Dz-kut33NVdIVCb

# Introduction

this project to analyze and predict housing prices using attributes or features such as square footage, number of bedrooms, number of floors, and so on. This is a template notebook. You will

# About the Dataset

This dataset is a modified version of the [original dataset](https://www.kaggle.com/harlfoxem/housesalesprediction?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-wwwcourseraorg-SkillsNetworkCoursesIBMDeveloperSkillsNetworkDA0101ENSkillsNetwork20235326-2022-01-01). It has been adapted for specific purposes or requirements.

| Variable      | Description                                                                                                 |
| ------------- | ----------------------------------------------------------------------------------------------------------- |
| id            | A notation for a house                                                                                      |
| date          | Date house was sold                                                                                         |
| price         | Price is prediction target                                                                                  |
| bedrooms      | Number of bedrooms                                                                                          |
| bathrooms     | Number of bathrooms                                                                                         |
| sqft_living   | Square footage of the home                                                                                  |
| sqft_lot      | Square footage of the lot                                                                                   |
| floors        | Total floors (levels) in house                                                                              |
| waterfront    | House which has a view to a waterfront                                                                      |
| view          | Has been viewed                                                                                             |
| condition     | How good the condition is overall                                                                           |
| grade         | overall grade given to the housing unit, based on King County grading system                                |
| sqft_above    | Square footage of house apart from basement                                                                 |
| sqft_basement | Square footage of the basement                                                                              |
| yr_built      | Built Year                                                                                                  |
| yr_renovated  | Year when house was renovated                                                                               |
| zipcode       | Zip code                                                                                                    |
| lat           | Latitude coordinate                                                                                         |
| long          | Longitude coordinate                                                                                        |
| sqft_living15 | Living room area in 2015(implies-- some renovations) This might or might not have affected the lotsize area |
| sqft_lot15    | LotSize area in 2015(implies-- some renovations)                                                            |

## **Import the required libraries**
"""

!pip install pandas==1.3.4 numpy==1.21.4 seaborn==0.9.0 matplotlib==3.5.0 scikit-learn==0.20.1

# Surpress warnings:
def warn(*args, **kwargs):
    pass
import warnings
warnings.warn = warn

!pip install -U scikit-learn

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler,PolynomialFeatures
from sklearn.linear_model import LinearRegression
# %matplotlib inline

"""#Importing Data Sets

"""

!pip install seaborn

import seaborn as sns

filepath='https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DA0101EN-SkillsNetwork/labs/FinalModule_Coursera/data/kc_house_data_NaN.csv'
df = pd.read_csv(filepath, header=0)

df.head()

"""
Display the data types of each column
"""

df.dtypes

""" statistical summary of the dataframe.

"""

df.describe()

"""# Data Wrangling

Dropping the columns <code>"id"</code>  and <code>"Unnamed: 0"</code> from axis 1 using the method <code>drop()</code>.
"""

df.drop(columns=["id", "Unnamed: 0"], inplace=True)
df.describe()

"""showing missing values for the columns <code> bedrooms</code>  and <code> bathrooms </code>

"""

print("number of NaN values for the column bedrooms :", df['bedrooms'].isnull().sum())
print("number of NaN values for the column bathrooms :", df['bathrooms'].isnull().sum())

""" replaceing the missing values of the column <code>'bedrooms'</code> with the mean of the column  <code>'bedrooms' </code> using the method <code>replace()</code>."""

mean=df['bedrooms'].mean()
df['bedrooms'].replace(np.nan,mean, inplace=True)

"""replaceing the missing values of the column <code>'bathrooms'</code> with the mean of the column  <code>'bathrooms' </code> using the method <code>replace()</code>."""

mean=df['bathrooms'].mean()
df['bathrooms'].replace(np.nan,mean, inplace=True)

print("number of NaN values for the column bedrooms :", df['bedrooms'].isnull().sum())
print("number of NaN values for the column bathrooms :", df['bathrooms'].isnull().sum())

"""# Exploratory Data Analysis

count the number of houses with unique floor values and convert it to a data frame.
"""

floor_counts = df['floors'].value_counts().to_frame()
print(floor_counts)

"""Useing the function <code>boxplot</code> in the seaborn library  to  determine whether houses with a waterfront view or without a waterfront view have more price outliers.

"""

sns.boxplot(x="waterfront", y="price", data=df)

"""
Use the function <code>regplot</code>  in the seaborn library  to  determine if the feature <code>sqft_above</code> is negatively or positively correlated with price."""

#Enter Your Code, Execute and take the Screenshot
sns.regplot(x="price", y="sqft_above", data=df, line_kws={"color": "red"})
plt.ylim(0,)

""" find the feature other than price that is most correlated with price.

"""

df.corr()['price'].sort_values()

"""# Model Development

```
# This is formatted as code
```
Fit a linear regression model using the  longitude feature <code>'long'</code> and  caculate the R^2.
"""

X = df[['long']]
Y = df['price']
lm = LinearRegression()
lm.fit(X,Y)
lm.score(X, Y)

"""Fit a linear regression model to predict the <code>'price'</code> using the feature <code>'sqft_living'</code> then calculate the R^2."""

#Enter Your Code, Execute and take the Screenshot
X = df[['sqft_living']]
Y = df['price']
lm = LinearRegression()
lm.fit(X,Y)
lm.score(X, Y)

"""
Fit a linear regression model to predict the <code>'price'</code> using the list of features:
"""

features =["floors", "waterfront","lat" ,"bedrooms" ,"sqft_basement" ,"view" ,"bathrooms","sqft_living15","sqft_above","grade","sqft_living"]

"""calculate the R^2."""

#Enter Your Code, Execute and take the Screenshot
X = df[features]
Y = df['price']
lm = LinearRegression()
lm.fit(X,Y)
lm.score(X, Y)

"""
Createing a list of tuples which will be uesd in the following step, the first element in the tuple contains the name of the estimator

<code>'scale'</code>

<code>'polynomial'</code>

<code>'model'</code>

The second element in the tuple  contains the model constructor

<code>StandardScaler()</code>

<code>PolynomialFeatures(include_bias=False)</code>

<code>LinearRegression()</code>
"""

Input=[('scale',StandardScaler()),('polynomial', PolynomialFeatures(include_bias=False)),('model',LinearRegression())]

"""
Use the list to create a pipeline object to predict the 'price', fit the object using the features in the list <code>features</code>, and calculate the R^2."""

pipeline = Pipeline(Input)
pipeline.fit(X, Y)
pipeline.score(X, Y)

from sklearn.model_selection import cross_val_score
from sklearn.model_selection import train_test_split

"""# Model Evaluation and Refinement

spliting the data into training and testing sets:
"""

features =["floors", "waterfront","lat" ,"bedrooms" ,"sqft_basement" ,"view" ,"bathrooms","sqft_living15","sqft_above","grade","sqft_living"]
X = df[features]
Y = df['price']

x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.15, random_state=1)


print("number of test samples:", x_test.shape[0])
print("number of training samples:",x_train.shape[0])

"""

Create and fit a Ridge regression object using the training data, set the regularization parameter to 0.1, and calculate the R^2 using the test data."""

from sklearn.linear_model import Ridge
from sklearn.metrics import mean_squared_error, r2_score

RidgeModel=Ridge(alpha=0.1)
RidgeModel.fit(x_train, y_train)
yhat = RidgeModel.predict(x_test)
print(r2_score(y_test,yhat))

"""
Perform a second order polynomial transform on both the training data and testing data. Create and fit a Ridge regression object using the training data, set the regularisation parameter to 0.1, and calculate the R^2 utilising the test data provided."""

pr = PolynomialFeatures(degree=2)
x_train_pr = pr.fit_transform(x_train)
x_test_pr = pr.fit_transform(x_test)
RidgeModel.fit(x_train_pr, y_train)
y_hat = RidgeModel.predict(x_test_pr)
print(r2_score(y_test,y_hat))

"""This project utilizes the contributions of Joseph Santarcangelo and this project was a part of the final project for obtaining my IBM Data Analytics certification.

"""